/**
 * Parameters for opening the ePayco checkout.
 */
export interface OpenEpaycoCheckoutParams {
  /** The session ID obtained from your backend after calling createEpaycoSession. */
  sessionId: string;
  /**
   * Determines how the checkout is displayed.
   * `true`: Opens checkout in a new tab/window (external).
   * `false`: Opens checkout in an iframe on the current page (onepage).
   */
  external: boolean;
}

/**
 * Configuration object passed to the ePayco `checkout.configure` method.
 * This is used internally by the SDK.
 */
export interface EpaycoConfigureOptions {
  /** The session ID obtained from the backend. */
  sessionId: string;
  /** How the checkout is displayed: `true` for external, `false` for iframe/modal. */
  external: boolean;
  // key?: string; // Optional, likely for non-sessionId flows
  // test?: boolean; // Optional, test mode is typically set during backend session creation
}

/**
 * Data object received in the `onCreated` callback, triggered when the ePayco checkout UI is loaded.
 */
export interface EpaycoCheckoutCreatedData {
  configuration: {
    success: boolean;
    epaycoKey?: string;
    epaycoName?: string;
    epaycoDescription?: string;
    epaycoCurrency?: string;
    epaycoAmount?: string;
    epaycoCountry?: string;
    epaycoTest?: "true" | "false";
    epaycoIp?: string;
    epaycoLang?: string;
    epaycoResponse?: string; // responseUrl
    epaycoConfirmation?: string; // confirmationUrl
    epaycoEmailBilling?: string;
    epaycoNameBilling?: string;
    epaycoAddressBilling?: string;
    epaycoTypeDocBilling?: string;
    epaycoMobilephoneBilling?: string;
    epaycoNumberDocBilling?: string;
    epaycoCountryOriginRequest?: string;
    [key: string]: any; // For any other config fields
  };
  /** ePayco's internal session identifier for this checkout instance. */
  session: string;
  /** Indicates if the checkout UI is currently open. */
  isOpen: boolean;
  /** An initial transaction identifier generated by ePayco when the UI loads. */
  transactionId: string;
  /** Current status of the checkout UI, e.g., "active". */
  status: string;
  [key: string]: any; // For any other top-level fields
}

/**
 * Data object received in the `onResponse` callback after a payment attempt within the ePayco UI.
 */
export interface EpaycoCheckoutResponseData {
  /** A transaction identifier for this specific payment attempt/event. */
  transactionId: string;
  /** The primary ePayco reference number for the transaction. */
  ref_payco: number;
  /** The merchant's invoice ID. */
  factura: string;
  /** Description of the product/service. */
  descripcion: string;
  /** The transaction amount. */
  valor: number;
  /** Value Added Tax amount (if applicable). */
  iva?: number;
  /** Taxable base amount (if applicable). */
  baseiva?: number;
  /** ICO tax amount (if applicable). */
  ico?: number;
  /** Currency code (e.g., "COP"). */
  moneda: string;
  /**
   * The state of the transaction attempt from ePayco's perspective.
   * Common values: "Aceptada", "Rechazada", "Pendiente", "Fallida".
   */
  estado: string;
  /** A descriptive response message, often similar to `estado`. */
  respuesta: string;
  /** Authorization code from the payment processor, if applicable. */
  autorizacion?: string;
  /** Receipt number, often the same as `ref_payco`. */
  recibo?: string;
  /** Date and time of the transaction event. */
  fecha: string; // Format: "YYYY-MM-DD HH:MM:SS"
  /** Card franchise/brand (e.g., "VS" for Visa). */
  franquicia?: string;
  /** Full name of the card franchise/brand (e.g., "Visa"). */
  franquicie?: string;
  /** ePayco's numeric code for the response (e.g., 1 for success). */
  cod_respuesta: number;
  /** ePayco's error code (e.g., "00" for success). */
  cod_error?: string;
  /** Indicates if the transaction was a test: `1` for test, `0` for live. */
  enpruebas: 0 | 1;

  // Billing information associated with the payment
  nombres?: string;
  apellidos?: string;
  email?: string;
  documento?: string;
  tipo_doc?: string;
  ciudad?: string;
  direccion?: string;
  movil?: string;
  /** Country indicator, possibly for card origin (e.g., "PE"). */
  ind_pais?: string;
  /** IP address of the customer. */
  ip?: string;

  // Partial card details
  /** Last few digits of the card used, preceded by asterisks. */
  lastNumbers?: string;
  /** Country associated with the card (e.g., "PE"). */
  country_card?: string;

  /**
   * Custom 'extra' parameters that were passed during session creation.
   * e.g., `{ extra1: "value1", extra2: "value2" }`
   */
  extras?: {
    extra1?: string;
    extra2?: string;
    extra3?: string;
    extra4?: string;
    extra5?: string;
    extra6?: string;
    extra7?: string;
    extra8?: string;
    extra9?: string;
    extra10?: string;
    // extra11?: string; // If ePayco supports up to 11
    [key: string]: any; // For other potential extras
  };

  /** Response from the card network, if applicable. */
  cc_network_response?: {
    code: string;
    message: string;
  };

  [key: string]: any; // For any other fields not explicitly typed
}

/**
 * Data object received in the `onClosed` callback when the ePayco checkout UI is closed.
 */
export interface EpaycoCheckoutCloseData {
  /** Indicates that the checkout UI was closed. */
  closed: boolean;
}

/**
 * Represents the handler object returned by ePayco's `checkout.configure`.
 * Allows interaction with the ePayco checkout process by subscribing to events.
 */
export interface EpaycoNativeCheckoutHandler {
  /**
   * Opens the ePayco checkout UI based on the current configuration.
   * @returns The handler instance, allowing for method chaining.
   */
  openNew: () => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback that is invoked when the checkout UI is created and loaded.
   * @param callback Function to execute with creation data when the checkout is ready.
   * @returns The handler instance for chaining.
   */
  onCreated: (
    callback: (data: EpaycoCheckoutCreatedData) => void
  ) => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback for when a transaction ID is loaded (specific timing determined by ePayco).
   * @param callback Function to execute.
   * @returns The handler instance for chaining.
   */
  onLoadTransactionId: (callback: () => void) => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback for when a transaction ID is created (specific timing determined by ePayco).
   * @param callback Function to execute.
   * @returns The handler instance for chaining.
   */
  onCreatedTransactionId: (callback: () => void) => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback for handling errors reported by the ePayco checkout UI.
   * Note: The specific structure of `errorData` would need to be determined by triggering an error.
   * @param callback Function to execute with error data.
   * @returns The handler instance for chaining.
   */
  onErrors: (callback: (errorData: any) => void) => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback that is invoked when ePayco returns a response after a payment attempt.
   * This provides immediate client-side feedback on the transaction outcome.
   * @param callback Function to execute with the response data.
   * @returns The handler instance for chaining.
   */
  onResponse: (
    callback: (responseData: EpaycoCheckoutResponseData) => void
  ) => EpaycoNativeCheckoutHandler;

  /**
   * Registers a callback that is invoked when the ePayco checkout UI (modal/iframe) is closed.
   * Particularly useful for `external: false` mode.
   * @param callback Function to execute with close data.
   * @returns The handler instance for chaining.
   */
  onClosed: (
    callback: (data: EpaycoCheckoutCloseData) => void
  ) => EpaycoNativeCheckoutHandler;
}
